GNU nano 8.3                                            /data/data/com.termux/files/home/Python-3.11.9/Modules/posixmodule.c
 9800 {
 9801     Py_ssize_t n;
 9802     int async_err = 0;
 9803     PyObject *buffer;
 9804
 9805     if (length < 0) {
 9806         errno = EINVAL;
 9807         return posix_error();
 9808     }
 9809     buffer = PyBytes_FromStringAndSize((char *)NULL, length);
 9810     if (buffer == NULL)
 9811         return NULL;
 9812
 9813     do {
 9814         Py_BEGIN_ALLOW_THREADS
 9815         _Py_BEGIN_SUPPRESS_IPH
 9816         n = pread(fd, PyBytes_AS_STRING(buffer), length, offset);
 9817         _Py_END_SUPPRESS_IPH
 9818         Py_END_ALLOW_THREADS
 9819     } while (n < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
 9820
 9821     if (n < 0) {
 9822         if (!async_err) {
 9823             posix_error();
 9824         }
 9825         Py_DECREF(buffer);
 9826         return NULL;
 9827     }
 9828     if (n != length)
 9829         _PyBytes_Resize(&buffer, n);
 9830     return buffer;
 9831 }
 9832 #endif /* HAVE_PREAD */
 9833
 9834 /*[clinic input]
 9835 os.preadv -> Py_ssize_t
 9836
 9837     fd: int
 9838     buffers: object
 9839     offset: Py_off_t
 9840     flags: int = 0
 9841
 9842
 9843 Combines the functionality of readv() and pread(). As readv(), it will
 9844 transfer data into each buffer until it is full and then move on to the next
 9845 buffer in the sequence to hold the rest of the data. Its fourth argument,
 9846 specifies the file offset at which the input operation is to be performed. It
 9847 will return the total number of bytes read (which can be less than the total
 9848 capacity of all the objects).
 9849
 9850 The flags argument contains a bitwise OR of zero or more of the following flags:
 9851
 9852 - RWF_HIPRI
 9853 - RWF_NOWAIT
 9854
 9855 Using non-zero flags requires Linux 4.6 or newer.
 9856 [clinic start generated code]*/
 9857
 9858 static Py_ssize_t
 9859 os_preadv_impl(PyObject *module, int fd, PyObject *buffers, Py_off_t offset,
 9860                int flags)
 9861 /*[clinic end generated code: output=26fc9c6e58e7ada5 input=4173919dc1f7ed99]*/
 9862 {
 9863     Py_ssize_t cnt, n;
 9864     int async_err = 0;
 9865     struct iovec *iov;
 9866     Py_buffer *buf;
 9867
 9868     if (!PySequence_Check(buffers)) {
 9869         PyErr_SetString(PyExc_TypeError,
 9870             "preadv2() arg 2 must be a sequence");
 9871         return -1;
 9872     }
 9873
 9874     cnt = PySequence_Size(buffers);
 9875     if (cnt < 0) {
 9876         return -1;
 9877     }
 9878
 9879 if (!PySequence_Check(buffers)) {
 9880     PyErr_SetString(PyExc_TypeError,
 9881         "preadv2() arg 2 must be a sequence");
 9882     return -1;
 9883 }
 9884
 9885 cnt = PySequence_Size(buffers);
 9886 if (cnt < 0) {
 9887     return -1;
 9888 }
 9889
 9890 #ifndef HAVE_PREADV2
 9891     if (flags != 0) {
 9892         argument_unavailable_error("preadv2", "flags");
 9893         return -1;
 9894     }
 9895     if (iov_setup(&iov, &buf, buffers, cnt, PyBUF_WRITABLE) < 0) {
 9896         return -1;
 9897     }
 9898     n = read(fd, iov[0].iov_base, iov[0].iov_len);
 9899 #else
 9900         Py_BEGIN_ALLOW_THREADS
 9901         _Py_BEGIN_SUPPRESS_IPH
 9902 #ifdef HAVE_PREADV2
 9903         n = pread(fd, iov[0].iov_base, iov[0].iov_len, offset);
 9904 #endif
 9905 #if defined(__APPLE__) && defined(__clang__)
 9906 /* This entire function will be removed from the module dict when the API
 9907  * is not available.
 9908  */
 9909 #pragma clang diagnostic push
 9910 #pragma clang diagnostic ignored "-Wunguarded-availability"
 9911 #pragma clang diagnostic ignored "-Wunguarded-availability-new"
 9912 #endif
 9913     do {
 9914         Py_BEGIN_ALLOW_THREADS
 9915         _Py_BEGIN_SUPPRESS_IPH
 9916         n = preadv(fd, iov, cnt, offset);
 9917         _Py_END_SUPPRESS_IPH
 9918         Py_END_ALLOW_THREADS
 9919     } while (n < 0 && errno == EINTR && !(async_err = PyErr_CheckSignals()));
 9920 #if defined(__APPLE__) && defined(__clang__)
 9921 #pragma clang diagnostic
 9922 #endif
 9923 int saved_errno = errno;
 9924 iov_cleanup(iov, buf, cnt);
 9925     if (n < 0) {
 9926         if (!async_err) {
 9927             errno = saved_errno;
 9928             posix_error();
 9929         }
 9930 return -1;
 9931 }
 9932 return n;
 9933 }
 9934
 9935 /*[clinic input]
 9936 os.write -> Py_ssize_t
 9937
 9938     fd: int
 9939     data: Py_buffer
 9940     /
 9941
 9942 Write a bytes object to a file descriptor.
 9943 [clinic start generated code]*/
 9944 #endif
 9945 static Py_ssize_t
 9946 os_write_impl(PyObject *module, int fd, Py_buffer *data)
 9947 /*[clinic end generated code: output=e4ef5bc904b58ef9 input=3207e28963234f3c]*/
 9948 {
 9949 #ifdef HAVE_SENDFILE
 9950 #ifdef __APPLE__
 9951 /*[clinic input]
 9952 os.sendfile
 9953
 9954     out_fd: int
 9955     in_fd: int
 9956     offset: Py_off_t
 9957     count as sbytes: Py_off_t
 9958     headers: object(c_default="NULL") = ()
 9959     trailers: object(c_default="NULL") = ()
 9960     flags: int = 0
 9961
 9962 Copy count bytes from file descriptor in_fd to file descriptor out_fd.
 9963 [clinic start generated code]*/
 9964
 9965 static PyObject *
 9966 os_sendfile_impl(PyObject *module, int out_fd, int in_fd, Py_off_t offset,
 9967                  Py_off_t sbytes, PyObject *headers, PyObject *trailers,
 9968                  int flags)
 9969 /*[clinic end generated code: output=81c4bcd143f5c82b input=b0d72579d4c69afa]*/
 9970 #elif defined(__FreeBSD__) || defined(__DragonFly__)
 9971 /*[clinic input]
 9972 os.sendfile
 9973
 9974     out_fd: int
 9975     in_fd: int
 9976     offset: Py_off_t
 9977     count: Py_ssize_t
 9978     headers: object(c_default="NULL") = ()
 9979     trailers: object(c_default="NULL") = ()

^G Help         ^O Write Out    ^F Where Is     ^K Cut          ^T Execute      ^C Location     M-U Undo        M-A Set Mark    M-] To Bracket  M-B Previous    ◂ Back
^X Exit         ^R Read File    ^\ Replace      ^U Paste        ^J Justify      ^/ Go To Line   M-E Redo        M-6 Copy        ^B Where Was    M-F Next        ▸ Forward